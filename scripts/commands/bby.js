const axios = require("axios");
const baseApiUrl = "https://simsimi-fun.vercel.app";

module.exports.config = {
  name: "bby",
  version: "3.1.0",
  permission: 0,
  credits: "SAKIB",
  description: "Cute AI bot with Simsimi API + online teach feature",
  prefix: false,
  premium: false,
  category: "chat",
  usages: "[your message]",
  cooldowns: 0
};

const cuteReplies = [
  "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶ú‡¶æ‡¶®‡ßÅ üòò",
  "‡¶¨‡¶≤‡ßã ‡¶¨‡¶æ‡¶¨‡ßÅ üíñ",
  "‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø ‡¶ú‡¶æ‡¶® ü•∞",
  "‡¶ï‡¶ø ‡¶π‡¶á‡¶õ‡ßá ‡¶¨‡¶≤‡ßã ‡¶§‡ßã? üòè"
];

module.exports.run = async ({ api, event, args }) => {
  const { threadID, messageID, senderID } = event;
  const input = args.join(" ").trim();

  // Just "imu"
  if (!input) {
    const reply = cuteReplies[Math.floor(Math.random() * cuteReplies.length)];
    return api.sendMessage(reply, threadID, (err, info) => {
      if (!err) global.client.handleReply.push({
        name: module.exports.config.name,
        messageID: info.messageID,
        author: senderID
      });
    }, messageID);
  }

  // Teach mode
  if (input.toLowerCase().startsWith("teach ")) {
    const content = input.slice(6).trim();
    const [ask, ans] = content.split("=").map(s => s.trim());

    if (!ask || !ans) {
      return api.sendMessage("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã:\nimu teach ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® = ‡¶â‡¶§‡ßç‡¶§‡¶∞", threadID, messageID);
    }

    try {
      const teachURL = `${baseApiUrl}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}`;
      const res = await axios.get(teachURL);
      if (res.data.data.ask && res.data.data.ans) {
        return api.sendMessage(`‚úÖ ‡¶∂‡ßá‡¶ñ‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®:\n‚ùì ${res.data.data.ask}\nüí¨ ${res.data.data.ans}`, threadID, messageID);
      } else {
        return api.sendMessage("‚ùå ‡¶∂‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§", threadID, messageID);
      }
    } catch (err) {
      console.error("Teach API Error:", err.message);
      return api.sendMessage("‚ö†Ô∏è Teach API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID, messageID);
    }
  }

  // Normal Chat
  try {
    const res = await axios.get(`${baseApiUrl}/sim?text=${encodeURIComponent(input)}`);
    const reply = res.data.reply || "ü§î ‡¶Ü‡¶Æ‡¶ø ‡¶†‡¶ø‡¶ï ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶≤‡ßã ‡¶§‡ßã!";
    return api.sendMessage(reply, threadID, (err, info) => {
      if (!err) global.client.handleReply.push({
        name: module.exports.config.name,
        messageID: info.messageID,
        author: senderID
      });
    }, messageID);
  } catch (err) {
    console.error("Chat API Error:", err.message);
    return api.sendMessage("‚ö†Ô∏è ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID, messageID);
  }
};

module.exports.handleReply = async ({ api, event, handleReply }) => {
  const { threadID, messageID, senderID, body } = event;
  if (handleReply.author !== senderID) return;

  try {
    const res = await axios.get(`${baseApiUrl}/sim?text=${encodeURIComponent(body)}`);
    const reply = res.data.reply || "ü§î ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø, ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡ßÅ ‡¶∏‡¶π‡¶ú ‡¶ï‡¶∞‡ßá ‡¶¨‡¶≤‡ßã‡•§";
    return api.sendMessage(reply, threadID, (err, info) => {
      if (!err) global.client.handleReply.push({
        name: module.exports.config.name,
        messageID: info.messageID,
        author: senderID
      });
    }, messageID);
  } catch (err) {
    console.error("Reply Error:", err.message);
    return api.sendMessage("‚ö†Ô∏è ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID, messageID);
  }
};
  
