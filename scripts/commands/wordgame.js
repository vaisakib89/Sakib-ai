const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "wordgame", // command name
  version: "2.1.0", // version
  permission: 0, // public
  credits: "SAKIB", // author
  description: "‡¶è‡¶ï‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶æ‡¶® ‡¶ñ‡ßá‡¶≤‡¶æ (Hint ‡¶∏‡¶π)", // details
  prefix: false, // no prefix required
  premium: false,
  category: "‡¶ß‡¶æ‡¶Å‡¶ß‡¶æ‡¶∞ ‡¶ñ‡ßá‡¶≤‡¶æ", // shown in help
  usages: "wordgame", // usage
  cooldowns: 5, // 5 seconds
  dependencies: {
    "fs": "",
    "path": ""
  }
};

const timeoutDuration = 30 * 1000; // ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°

function shuffleWord(word) {
  const letters = word.split("");
  for (let i = letters.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [letters[i], letters[j]] = [letters[j], letters[i]];
  }
  return letters.join("");
}

module.exports.run = async function ({ api, event, args }) {
  const { threadID, senderID, messageID } = event;
  const dataPath = path.join(__dirname, "json", "words.json");

  if (!fs.existsSync(dataPath)) {
    return api.sendMessage("‚ùå | ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!", threadID, messageID);
  }

  let allItems;
  try {
    allItems = JSON.parse(fs.readFileSync(dataPath, "utf8"));
  } catch (err) {
    console.error("Failed to load word list:", err);
    return api.sendMessage("‚ö†Ô∏è ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßú‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID, messageID);
  }

  if (args[0]?.toLowerCase() === "guide") {
    return api.sendMessage(
      `üß† | ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ó‡¶æ‡¶á‡¶° ‚ú®\n\n` +
      `‚û§ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá: wordgame\n` +
      `‚û§ ‡¶Ö‡¶ó‡ßã‡¶õ‡¶æ‡¶®‡ßã ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶∏‡¶æ‡¶ú‡¶æ‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã‡•§\n` +
      `‚û§ ‡¶è‡¶ï‡¶ü‡¶ø Hint ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§\n` +
      `‚û§ ‡¶≠‡ßÅ‡¶≤ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã!\n` +
      `‚û§ ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá!\n\n` +
      `‚ö° ‡¶∂‡ßÅ‡¶≠‡¶ï‡¶æ‡¶Æ‡¶®‡¶æ!`, threadID, messageID
    );
  }

  const item = allItems[Math.floor(Math.random() * allItems.length)];
  const shuffled = shuffleWord(item.word);

  return api.sendMessage(
    `üß© | ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶∏‡¶æ‡¶ú‡¶æ‡¶ì: ${shuffled}\n` +
    `üí° | Hint: ${item.hint}\n\n` +
    `üí¨ | ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®!\n` +
    `‚è≥ | ‡¶∏‡¶Æ‡ßü: ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°!`, 
    threadID,
    async (err, info) => {
      const timeout = setTimeout(() => {
        try {
          api.unsendMessage(info.messageID);
          api.sendMessage(`‚è∞ | ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤: "${item.word}"`, threadID);
        } catch (e) {
          console.log("Timeout unsend failed:", e);
        }
      }, timeoutDuration);

      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: senderID,
        word: item.word,
        timeout
      });
    }
  );
};

module.exports.handleReply = async function ({ api, event, handleReply }) {
  const { threadID, senderID, messageID, body } = event;

  if (senderID !== handleReply.author) return;

  if (body.toLowerCase().trim() === handleReply.word.toLowerCase()) {
    clearTimeout(handleReply.timeout);
    try {
      await api.unsendMessage(handleReply.messageID);
    } catch (e) {
      console.error("Unsend error:", e);
    }
    return api.sendMessage(`‚úÖ | ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡¶õ‡ßã!`, threadID, messageID);
  } else {
    return api.sendMessage(`‚ùå | ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã!`, threadID, messageID);
  }
};